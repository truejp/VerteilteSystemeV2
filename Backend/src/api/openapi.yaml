openapi: 3.0.0
info:
  title: Vehicle Inventory
  description: "Das Vehicle Inventory beinhaltet diverse Fahrzeuge verschiedener Marken.\
    \ Die Daten, welche im Backend zur Verfügung gestellt werden, können mittels \
    \ API Abfrage von verschiedenen Frontends optisch aufbereitet werden. \
    \ Die Informationen beinhalten Marke, Modell und Leistung (PS)."
  contact:
    name: Philipp Lehnet 
    url: https://www.bl-itsolutions.de
    email: lehnet@bl-itsolutions.de
  license:
    name: MIT
    url: https://mit-license.org
  version: "1.0"
servers:
- url: http://localhost:3000
tags:
- name: Index
- name: Vehicle
paths:
  /:
    get:
      tags:
      - Index
      summary: Webservice Root
      description: Provides Overview over all routes.
      operationId: index
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HATEOAS_Collection'
                x-content-type: application/json

  /vehicle:
    get:
      tags:
      - Vehicle
      summary: Find Vehicles
      description: Search for specific vehicles. Returns list of all vehicles.
      operationId: search-vehicle
      parameters:
      - name: vendor
        in: query
        description: Vendor of vehicle
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: model
        in: query
        description: Model of vehicle
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: power
        in: query
        description: Power of vehicle
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Vehicle'
                x-content-type: application/json
    post:
      tags:
      - Vehicle
      summary: Create new vehicle
      description: "Create a new vehicle. Saves passed parameters in the database. \
        \Param ID gets ignored as it will be assigned automatically."
      operationId: create-vehicle
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vehicle'
      responses:
        "201":
          description: Created
          headers:
            Location:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'

  /vehicle/{id}:
    get:
      tags:
      - Vehicle
      summary: fetch vehicle
      description: Fetches a single vehicle from the database.
      operationId: get-vehicle
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        "404":
          description: Not Found
    put:
      tags:
      - Overwrite vehicle
      summary: ""
      description: "Overwrites a single vehicle in the database. You can edit all \
        \ attributes except the ID."
      operationId: update-vehicle
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vehicle'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        "404":
          description: Not Found
    patch:
      tags:
      - Change single attributes
      summary: Change single attributes
      description: "Changes single attributes of existing vehicles.\
        \ You are allowed to change any attribute except of the ID."
      operationId: patch-vehicle
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vehicle'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
        "404":
          description: Not Found
    delete:
      tags:
      - Vehicle
      summary: Delete vehicle
      description: Deletes a single vehicle from the database.
      operationId: delete-vehicle
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
        "404":
          description: Not Found
  /truck:
    get:
      tags:
      - Vehicle
      summary: Find Vehicles
      description: Search for specific vehicles. Returns list of all vehicles.
      operationId: search-truck
      parameters:
      - name: vendor
        in: query
        description: Vendor of vehicle
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: model
        in: query
        description: Model of vehicle
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: power
        in: query
        description: Power of vehicle
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Truck'
                x-content-type: application/json
    post:
      tags:
      - Vehicle
      summary: Create new vehicle
      description: "Create a new vehicle. Saves passed parameters in the database. \
        \Param ID gets ignored as it will be assigned automatically."
      operationId: create-truck
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Truck'
      responses:
        "201":
          description: Created
          headers:
            Location:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Truck'

  /truck/{id}:
    get:
      tags:
      - Vehicle
      summary: fetch vehicle
      description: Fetches a single vehicle from the database.
      operationId: get-truck
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Truck'
        "404":
          description: Not Found
    put:
      tags:
      - Overwrite vehicle
      summary: ""
      description: "Overwrites a single vehicle in the database. You can edit all \
        \ attributes except the ID."
      operationId: update-truck
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Truck'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Truck'
        "404":
          description: Not Found
    patch:
      tags:
      - Change single attributes
      summary: Change single attributes
      description: "Changes single attributes of existing vehicles.\
        \ You are allowed to change any attribute except of the ID."
      operationId: patch-truck
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Truck'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Truck'
        "404":
          description: Not Found
    delete:
      tags:
      - Vehicle
      summary: Delete vehicle
      description: Deletes a single vehicle from the database.
      operationId: delete-truck
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
        "404":
          description: Not Found

  /motorcycle:
    get:
      tags:
      - Vehicle
      summary: Find Vehicles
      description: Search for specific vehicles. Returns list of all vehicles.
      operationId: search-motorcycle
      parameters:
      - name: vendor
        in: query
        description: Vendor of vehicle
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: model
        in: query
        description: Model of vehicle
        required: false
        style: form
        explode: true
        schema:
          type: string
      - name: power
        in: query
        description: Power of vehicle
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Motorcycle'
                x-content-type: application/json
    post:
      tags:
      - Vehicle
      summary: Create new vehicle
      description: "Create a new vehicle. Saves passed parameters in the database. \
        \Param ID gets ignored as it will be assigned automatically."
      operationId: create-motorcycle
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Motorcycle'
      responses:
        "201":
          description: Created
          headers:
            Location:
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Motorcycle'

  /motorcycle/{id}:
    get:
      tags:
      - Vehicle
      summary: fetch vehicle
      description: Fetches a single vehicle from the database.
      operationId: get-motorcycle
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Motorcycle'
        "404":
          description: Not Found
    put:
      tags:
      - Overwrite vehicle
      summary: ""
      description: "Overwrites a single vehicle in the database. You can edit all \
        \ attributes except the ID."
      operationId: update-motorcycle
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Motorcycle'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Motorcycle'
        "404":
          description: Not Found
    patch:
      tags:
      - Change single attributes
      summary: Change single attributes
      description: "Changes single attributes of existing vehicles.\
        \ You are allowed to change any attribute except of the ID."
      operationId: patch-motorcycle
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Motorcycle'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Motorcycle'
        "404":
          description: Not Found
    delete:
      tags:
      - Vehicle
      summary: Delete vehicle
      description: Deletes a single vehicle from the database.
      operationId: delete-motorcycle
      parameters:
      - name: id
        in: path
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: OK
        "404":
          description: Not Found

components:
  schemas:
    HATEOAS_Collection:
      title: HATEOAS-Links of the Collection
      type: object
      properties:
        _name:
          type: string
        query:
          $ref: '#/components/schemas/HATEOAS_Link'
        create:
          $ref: '#/components/schemas/HATEOAS_Link'

    HATEOAS_Resource:
      title: HATEOAS-Links of a Ressource
      type: object
      properties:
        read:
          $ref: '#/components/schemas/HATEOAS_Link'
        update:
          $ref: '#/components/schemas/HATEOAS_Link'
        patch:
          $ref: '#/components/schemas/HATEOAS_Link'
        delete:
          $ref: '#/components/schemas/HATEOAS_Link'

    HATEOAS_Link:
      title: HATEOAS-Link
      type: object
      properties:
        url:
          type: string
        method:
          type: string
        query_params:
          type: array
          items:
            type: string

    Vehicle:
      title: Vehicle
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/HATEOAS_Resource'
        _id:
          type: string
        vendor:
          type: string
        model:
          type: string
        power:
          type: string
      required:
        - vendor
        - model
      example:
        _id: "621ff9a936997df5baba746e"
        vendor: "Audi"
        model: "TT RS Coupe"
        power: "249 PS"
    Motorcycle:
      title: Motorcycle
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/HATEOAS_Resource'
        _id:
          type: string
        vendor:
          type: string
        model:
          type: string
        power:
          type: string
      required:
        - vendor
        - model
      example:
        _id: "621ff9a936997df5baba746e"
        vendor: "BMW"
        model: "R1100RS"
        power: "249 PS"
    Truck:
      title: Truck
      type: object
      properties:
        _links:
          $ref: '#/components/schemas/HATEOAS_Resource'
        _id:
          type: string
        vendor:
          type: string
        model:
          type: string
        power:
          type: string
      required:
        - vendor
        - model
      example:
        _id: "621ff9a936997df5baba746e"
        vendor: "MAN"
        model: "Semi Truck"
        power: "510 PS"
  securitySchemes: {}
